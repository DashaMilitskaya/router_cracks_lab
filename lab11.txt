15.04.2024


Роутер WR841n (v8).
RAM: 32МБ
Flash: SPI, 25 серии, SOIP-8 (4 МБ).

В предоставленных роутерах распаяны разъемы UART (для консоли), JTAG (для отладки).

Разъем UART.
Распаяны 3 пина: TX(отмечен белым), RX, GND, VCC(не распаян).
Подключаться через адаптер USB-UART. В качестве клиента использовать putty (под Windows), minicom (под Linux).
Скорость: 115200
Программное управление потоком: нет
Аппаратное управление потоком: нет

Данные для аутентификации
root:sohoadmin
В старых моделях было:
root:5up


Флешка (на 4 МБ) вынесена на адаптер DIP-8. На адаптере место 1-го пина отмечено (черным). Прошивка роутера умеет перегрограммировать флешку (при обновлении или при изменении параметров).
Для чтения/записи флешки может использовать программатор. На парах предоставляется программатор на чипе CH341A.
Для программирования можно использовать программу CH341A Programmer (под Windows), flashrom (под *NIX-системы).


Прошивка роутера.

Перед прошивкой роутера лучше сделать резервную копию образа с помощью программатора.

На сайте tp-link можно скачать обновления прошивки (бинарные образы), которые заливаются на роутер через веб-интерфейс. Для примера предоставлен образ wr841nv8_en_3_15_9_up_boot(140724).bin.
Производитель предоставляет исходный код прошивки (для программ с открытыми лицензиями).
https://www.tp-link.com/ru/support/gpl-code/
ap123_gpl.tar.gz - исходный код прошивки для предоставленной модели роутера.
В корне расположен файл readme.txt, в котором расписан процесс сборки исполняемых модулей: загрузчик, ядро.

# make BOARD_TYPE=ap123 toolchain_prep
Распаковывает в gcc-4.3.3 набор компиляторов gcc для сборки исполняемых файлов для пратформы mips (big endian) на платформе i386.
В каталоге gcc-4.3.3/build_mips/staging_dir/usr/bin лежат обычные утилиты gcc:
Для компиляции программ можем использовать mips-linux-uclibc-gcc.

# make BOARD_TYPE=ap123 fs_prep
# make BOARD_TYPE=ap123 fakeroot_build
# make BOARD_TYPE=ap123 uboot
# make BOARD_TYPE=ap123 kernel_build

Прошивка представляет из себя стандартный образ в формате прошивок TP-Link v1. В прошивке хранится загрузчик (может отсутствовать), ядро и сжатая (squashfs) файловая система.

В каталоге wr841n\bin представлен набор утилит для разборки/сборки прошивки.

Помещаем оригинальную прошивку image.bin в некоторый каталог (например, /firmware). В этом каталоге выполняем команду:
# unpack_image.sh image.bin
В результате в каталоге создаются файлы:
image - копия прошивки
image-bootldr.orig		загрузчик из прошивки
image-header.orig		файл с заголовками образа прошивки (будет использовать при обратной сборке)
image-kernel.orig		запакованное (lzma) ядро из прошивки
image-kernel-decompress.orig	распакованное ядро
image-rootfs.orig		сжатая файловая система (squashfs)
squashfs-root			дерево разжатой файловой системы
model.conf				текстовый файл с настройками

Из этих отдельных файлов прошивку можно собрать обратно. Для этого нужны следующие файлы:
image-header
image-bootldr
image-kernel
image-rootfs

При сборке используется информация из файла image-header, но при этом обновляются в итоговом образе размеры ядра, загрузчика, файловой системы, контрольная сумма. Этот файл необходимо править для изменения другой информации, например адреса точки входа ядра.

Файл image-bootldr.
Либо взять оригинальный:
# cp image-bootldr.orig image-bootldr
Либо взять собранный из исходников:
# cp u-boot.bin image-bootldr

Файл image-kernel.
Либо взять оригинальный:
# cp image-kernel-decompress.orig image-kernel-decompress
Либо взять собранный из исходников:
# cp vmlinux.bin image-kernel-decompress
Адрес загрузки нового ядра будет совпадать со старым. Размер ядра изменится, но при сборке это будет учтено. Адрес точки входа необходимо поменять (либо изменить программу tpl-tool, либо изменить адрес в файле image-header).
Адрес точки входа можно посмотреть в ELF-образе ядра - файле vmlinux (vmlinux.bin - образ только нужных секций):
# readelf -h vmlinux
...
  Entry point address:               0x801a9c00
0x801a9c20
...

Адрес точки ядра из оригинального образа можно узнать из заголовка:
# image-info.sh image
...
Kernel Entry Point : 0x801ab690
...
Дальше в файле image-header необходимо найти этот адрес (он будет расположен по смещению 0x78 в формате big endian) и изменить его.

Файл image-rootfs.
Собирается из файлов в каталоге squashfs-root и файла model.conf (который шифруется и копируется в squashfs-root/web/oem/model.conf). В каталог можно вносить изменения в файлы. В частности можно добавить в каталоги /usr/bin, /usr/sbin файлы из архива usr_bin_sbin.gz для того, чтобы на роутере была доступна команда scp (для копирования файлов по сети).

После того, как подготовлены эти четыре файла, можно собрать образ:
# ../bin/pack_image.sh
В случае успеха появится файл new_image.bin, который можно заливать через веб-интерфейс.

При пересбоке образа лучше удалить файл image-rootfs-nopad.


На работающий роутер можно по сети скопировать файлы: во всех прошивка tftp, либо можно добавить в образ файловой системы scp.
Файлы можно сохранять только в каталог /tmp (ramfs).
# scp 192.168.0.2:/.../strace /tmp


В каталоге wr841n\tools лежат программы gdb, gdbserver, strace, собранные под MIPS (big endian).



Шеллкоды для MIPS.
https://www.linux-mips.org/wiki/Syscall
https://git.linux-mips.org/cgit/ralf/linux.git/tree/arch/mips/include/uapi/asm/unistd.h
Номера системных вызовов с 4000.
Аргументы передаются через регистры a0-a3, остальные через стек с последнего. Под первые четыре аргумента место также резервируется.
Номер системного вызова через регистр v0. Возвращаемое значение в регистре v0.
/*Заметки*/

Собрать отдельно программу под это чудо:
./gcc-4.3.3/build_mips/staging_dir/usr/bin/mips-linux-uclibc-gcc ./hello_word.c -o hello_word -meb -mgp32
./mtd/devices/ar7100_flash.c



