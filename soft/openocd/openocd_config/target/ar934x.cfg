#
# Written by Weijie Gao <hackpascal@gmail.com>
# DO NOT REMOVE THESE LINES
#

telnet_port 4444

#interface sysfsgpio

#                   tck tms tdi tdo
##sysfsgpio_jtag_nums 19 18 7 8

##sysfsgpio_trst_num 6
# sysfsgpio_srst_num 6

adapter_nsrst_delay 100
jtag_ntrst_delay 100

reset_config trst_and_srst

#set CHIPNAME ar9341
set CHIPNAME ar934x

jtag newtap $CHIPNAME cpu -irlen 5 -ircapture 0x1 -irmask 0x1f -expected-id 1

set TARGETNAME $CHIPNAME.cpu
target create $TARGETNAME mips_m4k -endian big -chain-position $TARGETNAME

#$TARGETNAME configure -work-area-phys 0xa0600000 -work-area-size 0x20000
#$TARGETNAME configure -work-area-phys 0x82000000 -work-area-size 0x20000
#$TARGETNAME configure -work-area-phys 0x1D000000 -work-area-size 0x20000
#$TARGETNAME configure -work-area-phys 0x1D007000 -work-area-size 0x1000
#$TARGETNAME configure -work-area-phys 0x1D000000 -work-area-size 0x8000


proc read_register {register} {
	set result ""
	mem2array result 32 $register 1
	return $result(0)
}

proc ar934x_gpio_init () {
	# GPIO_FUNCTION_ADDRESS
	mww 0xb804006c 0
	
	# GPIO_OUT_FUNCTION1_ADDRESS
	mww 0xb8040030 [expr [read_register 0xb8040030] & 0xffffff00]
	
	# GPIO_OUT_FUNCTION2_ADDRESS
	mww 0xb8040034 [expr [read_register 0xb8040034] & 0x00ffffff]
	
	# GPIO_OUT_FUNCTION3_ADDRESS
	mww 0xb8040038 0
	
	# GPIO_OUT_FUNCTION4_ADDRESS
	mww 0xb804003c 0
	
	# GPIO_OUT_FUNCTION5_ADDRESS
	mww 0xb8040040 0
}

proc ar934x_pll_init () {
	set bs [expr [read_register 0xb80600b0]]
	set xtal_40mhz 0
	
	echo -n "Initializing PLL for 560/400/200 ... "
	
	if { [expr $bs & 0x10] == 1 } {
		set xtal_40mhz 1
	}
	
	mww 0xb81161c4 0x13210f00
	mww 0xb81161c8 0x03000000
	mww 0xb8116244 0x13210f00
	mww 0xb8116248 0x03000000
	mww 0xb8116188 0x03000000
	
	# PLL bypass
	mww 0xb8050008 0x0130801c
	
	# CPU PLL Power down
	mww 0xb8050000 [expr [read_register 0xb8050000] | 0x40000000]
	
	# DDR PLL Power down
	mww 0xb8050004 [expr [read_register 0xb8050004] | 0x40000000]
	
	# Clock control
	mww 0xb8050008 0x0130801c
	
	# CPU PLL set
	mww 0xb81161c4 0x10810f00
	
	if {$xtal_40mhz == 1} {
		mww 0xb81161c0 0x08380000
	} else {
		mww 0xb81161c0 0x29c00000
	}
	
	mww 0xb81161c4 0xd0810f00
	mww 0xb81161c8 0x03000000
	mww 0xb81161c4 0xd0800f00
	
	# CPU clear DO_MEAS1
	mww 0xb81161c8 [expr [read_register 0xb81161c8] & 0xbfffffff]
	
	# CPU set DO_MEAS1
	mww 0xb81161c8 [expr [read_register 0xb81161c8] | 0x40000000]
	
	# CPU wait for MEAS1 done
	sleep 100
	
	# CPU clear DO_MEAS2
	mww 0xb81161c8 [expr [read_register 0xb81161c8] & 0xbfffffff]
	
	# DDR PLL set
	mww 0xb8116244 0x10810f00
	
	if {$xtal_40mhz == 1} {
		mww 0xb8116240 0x08280000
	} else {
		mww 0xb8116240 0x08400000
	}
	
	mww 0xb8116244 0xd0810f00
	mww 0xb8116248 0x03000000
	mww 0xb8116244 0xd0800f00
	
	# DDR clear DO_MEAS1
	mww 0xb8116248 [expr [read_register 0xb8116248] & 0xbfffffff]
	
	# DDR set DO_MEAS1
	mww 0xb8116248 [expr [read_register 0xb8116248] | 0x40000000]
	
	# DDR wait for MEAS1 done
	sleep 100
	
	# DDR clear DO_MEAS2
	mww 0xb8116248 [expr [read_register 0xb8116248] & 0xbfffffff]
	
	# PLL bypass unset
	mww 0xb8050008 0x01308000
	
	# PLL dither unset
	mww 0xb8050048 0
	mww 0xb8050044 0
	
	echo "Done."
}

proc ar934x_dram_init () {
	set dram_type 0
	set dram_32bit 0
	set dram_desc ""
	set dram_width_desc "16-bit"
	set bs [expr [read_register 0xb80600b0]]
	
	set ddr_config 0
	set ddr_config2 0
	set tap_val 0
	set cycle_val 0
	
	if { [expr $bs & 0x2] == 0 } {
		set dram_desc "SDRAM"
		set dram_type 1
		set ddr_config 0x7fbe8cd0
		set ddr_config2 0x959f66a8
		set tap_val 0x1f1f
		set cycle_val 0xffffffff
	} else {
		if { [expr $bs & 0x1] == 0 } {
			set dram_desc "DDR2"
			set dram_type 2
			set ddr_config 0xc7d48cd0
			set ddr_config2 0x9dd0e6a8
			set tap_val 0x10012
			set cycle_val 0xffff
		
			# DDR width
			if { [expr $bs & 0x80] == 1 } {
				# 32-bit
				set dram_32bit 1
				set cycle_val 0xff
				set dram_width_desc "32-bit"
			}
		} else {
			set dram_desc "DDR"
			set dram_type 3
			set ddr_config 0x7fd48cd0
			set ddr_config2 0x99d0e6a8
			set tap_val 0x14
			set cycle_val 0xffff
		}
	}
	
	echo -n "Initializing DDR Controller for "
	echo -n $dram_desc
	echo -n " "
	echo -n $dram_width_desc
	echo -n " ... "
	
	if { $dram_type == 1 } {
		# Enable SDRAM mode
		mww 0xb8000108 0x0000013b
		sleep 1
		
		# Undocumented
		mww 0xb8000118 0x3000001f
		sleep 1
	} elseif { $dram_type == 2 } {
		# DDR2_CONFIG_ADDRESS
		mww 0xb80000b8 0x00000e59
		sleep 1
		
		if { $dram_32bit == 1 } {
			# DDR_CTL_CONFIG_ADDRESS
			mww 0xb8000108 0x00000040
		} else {
			set ddr_ctl_val [expr [read_register 0xb8000108]]
			set ddr_ctl_val [expr $ddr_ctl_val | 0x00000040]
			set ddr_ctl_val [expr $ddr_ctl_val & 0xffffffc3]
				
			# DDR_CTL_CONFIG_ADDRESS
			mww 0xb8000108 $ddr_ctl_val
		}
		sleep 1
	}
	
	# DDR_RD_DATA_THIS_CYCLE_ADDRESS
	mww 0xb8000018 $cycle_val
	sleep 1
	
	# DDR_BURST_ADDRESS
	mww 0xb80000c4 0x74444444
	
	# DDR_BURST2_ADDRESS
	mww 0xb80000c8 0x222
	
	# AHB_MASTER_TIMEOUT_ADDRESS
	mww 0xb80000cc 0xfffff
	
	# DDR_CONFIG_ADDRESS
	mww 0xb8000000 $ddr_config
	sleep 1
	
	# DDR_CONFIG2_ADDRESS (CKE low)
	mww 0xb8000004 [expr $ddr_config2 & 0xffffff7f]
	sleep 1
	
	# DDR_CONFIG2_ADDRESS
	mww 0xb8000004 $ddr_config2
	sleep 1
	
	# Precharge All
	mww 0xb8000010 0x8
	
	# Precharge All
	mww 0xb8000010 0x8
	
	if { $dram_type == 2 } {
		# Write EMR2
		mww 0xb8000010 0x10
		
		# Write EMR3
		mww 0xb8000010 0x20
	}
	
	if { $dram_type != 1 } {
		# DDR_EXT_MODE_ADDRESS (DLL enable)
		mww 0xb800000c 0x2
		
		# Write EMR
		mww 0xb8000010 0x2
	}
	
	# DDR_MODE_ADDRESS (Initial MR)
	mww 0xb8000008 0x133
	sleep 1
	
	# Write MR
	mww 0xb8000010 0x1
	
	# Precharge All
	mww 0xb8000010 0x8
	
	# Precharge All
	mww 0xb8000010 0x8
	
	# Auto refresh
	mww 0xb8000010 0x4
	
	# Auto refresh
	mww 0xb8000010 0x4
	
	# DDR_MODE_ADDRESS (Final MR)
	mww 0xb8000008 0x33
	sleep 1
	
	# Write MR
	mww 0xb8000010 0x1
	
	if { $dram_type == 2 } {
		# DDR_EXT_MODE_ADDRESS (Initial EMR)
		mww 0xb800000c 0x382
		
		# Write EMR
		mww 0xb8000010 0x2
		sleep 1
		
		# DDR_EXT_MODE_ADDRESS (Final EMR)
		mww 0xb800000c 0x402
		
		# Write EMR
		mww 0xb8000010 0x2
		sleep 1
	}
	
	# DDR_REFRESH_ADDRESS
	mww 0xb8000014 0x4270
	
	# DDR_TAP_CONTROL
	mww 0xb800001c $tap_val
	mww 0xb8000020 $tap_val
	
	if { $dram_32bit == 1 } {
		mww 0xb8000024 $tap_val
		mww 0xb8000028 $tap_val
	}
	
	echo "Done."
}

proc ar934x_serial_init () {
	set bs [expr [read_register 0xb80600b0]]
	
	echo -n "Initializing serial console with baudrate 115200 ... "
	
	# set DIAB bit
	mww 0xb802000c 0x80
	
	if { [expr $bs & 0x10] == 1 } {
		# 40MHz
		mww 0xb8020000 0
		mww 0xb8020004 0x16
	} else {
		# 25MHz
		mww 0xb8020000 0
		mww 0xb8020004 0xe
	}
	
	# clear DIAB bit
	mww 0xb802000c 0
	
	# set data format
	mww 0xb802000c 3
	
	# disable interrupt
	mww 0xb8020004 0
	
	echo "Done."
}

proc ar934x_init () {
	reg cause 0
	reg status 0x10000004
	
	ar934x_gpio_init ()	
	ar934x_pll_init ()
	ar934x_dram_init ()
	ar934x_serial_init ()
	
	# SPI CLK
	mww 0xbf000004 0x243
	
	# AR_PHY_PMU1
	mww 0xb8116c40 0x633c8176
	
	# AR_PHY_PMU2
	mww 0xb8116c44 0x10380000
	
	# RTC de-assert
	mww 0xb806001c [expr [read_register 0xb806001c] & 0xf7ffffff]
	
	echo "AR934X init done."
}
